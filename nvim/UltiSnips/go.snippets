# go UltiSnips

snippet /^pa/ "package declaration" r
// Package $1 provides ...
package ${1:`!v strlen(expand("%:h:t")) ? expand("%:h:t") : ""`}

$0
endsnippet

snippet /^im/ "import" r
import (
	$1
)

$0
endsnippet

snippet if "if" b
if $1 {
	$0
}
endsnippet

snippet ir "if err != nil" b
if ${1:err} != nil {
	${2:return $1}
}
endsnippet

snippet elif "else if"
else if $1 {
	$0
}
endsnippet

snippet /\bel(se)?/ "else" r
else {
	$0
}
endsnippet

snippet /fo(r)?/ "for" br
for $1 {
	$0
}
endsnippet

snippet fori "for i"
for ${2:i} := 0; $2 < $1; $2${3:++} {
	$0
}
endsnippet

snippet fr "for range"
for ${2:${3:k}, ${4:v}} := range $1 {
	$0
}
endsnippet

snippet sw "switch"
switch ${1:value}${1/(.+)/(?1: )/}{
case ${2:/* expression */}:
	$0
}
endsnippet

snippet swt "type switch"
switch ${2:${3:/* variable */} := }${1:value}.(type) {
case ${4:/* type */}:
	$0
}
endsnippet

snippet sel "select"
select {
case $1:
	$0
}
endsnippet

snippet cs "case"
case $1:
	$0
endsnippet

snippet de "default"
default:
	$0
endsnippet

snippet /^f/ "function" r
// $1 ${4:...}
func ${1:Function}($2) ${3:error}${3/(.+)/(?1: )/}{
	${0:// code...}
}
endsnippet

snippet /^m/ "method" r
// $3 ${6:...}
func (${1:self} ${2:Type}) ${3:Function}($4) ${5:error}${5/(.+)/(?1: )/}{
	${0:// code...}
}
endsnippet

snippet /^st/ "struct" r
// ${2:A $1 ${3:is a...}}
type ${1} struct {
	$0
}
endsnippet

snippet /^in/ "interface" r
// $1 ${2:is...}
type ${1} interface {
	$0
}
endsnippet

snippet mk "make()"
make($1, ${2:length}${3/(.+)/(?1:, )/}${3:capacity})
endsnippet

snippet cp "copy()" b
copy(${1:dst}, ${2:src})
endsnippet

snippet ap "append()" b
${1:slice} = append($1, ${2:elem})
endsnippet

snippet ins "slice insert" b
${1:a} = append($1[:${2:i}], append([]${3:T}{${4:x}}, $1[$2:]...)...)
endsnippet

snippet del "slice delete" b
${1:a} = append($1[:${2:i}], $1[$2+1:]...)
endsnippet

# go func() {...}()
snippet gof
go func() {
	$0
}()
endsnippet

# lock
snippet lock "mutex.Lock()" b
${1:mutex}.Lock()
defer $1.Unlock()
endsnippet

snippet rlock "mutex.RLock()" b
${1:mutex}.RLock()
defer $1.RUnlock()
endsnippet

# common functions
snippet /^test/ "gotest unit test" r
func Test${1:Func}(t *testing.T) {
	${0:// code...}
}
endsnippet

snippet /^bench/ "gotest benchmark" r
func Benchmark${1:Func}(b *testing.B) {
	${0:// code...}
}
endsnippet

snippet /^main/ "main()" r
func main() {
	${0:// code...}
}
endsnippet

snippet /^mstr/ "String() method" r
func (${1:self} ${2:Type}) String() string {
	${0:// code...}
}
endsnippet

snippet /^merr/ "Error() method" r
func (${1:self} ${2:Type}) Error() string {
	${0:// code...}
}
endsnippet

snippet /^hf/ "http HandlerFunc" r
func ${1:Handler}(w http.ResponseWriter, req *http.Request) {
	${0:// code...}
}
endsnippet
